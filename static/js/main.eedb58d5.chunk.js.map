{"version":3,"sources":["state/api/todolists-api.ts","state/redux/app-Reducer.ts","state/redux/loggin-Reducer.ts","components/AppBar/AppBar.tsx","components/temp/Preloader.tsx","components/ErrorBar/ErrorBar.tsx","state/redux/todolists-Reducer.ts","state/redux/tasks-Reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","components/TodolistsList/TodolistsList.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","state/redux/store.ts","index.tsx","components/Todolist/Todolist.module.css"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","payload","initialState","status","error","isInitialized","changeAppStatus","type","setAppError","setInitialize","value","isLogged","setIsLoggedIn","Header","isLoggedIn","useSelector","state","loggin","dispatch","useDispatch","logOutHandler","then","res","data","resultCode","messages","Box","sx","flexGrow","AppBar","position","color","Toolbar","style","display","justifyContent","IconButton","size","edge","mr","Button","onClick","href","LinearBuffer","React","progress","setProgress","buffer","setBuffer","progressRef","current","diff","Math","random","diff2","timer","setInterval","clearInterval","width","LinearProgress","variant","valueBuffer","Alert","props","ref","elevation","ErrorBar","app","handleClose","event","reason","Stack","spacing","Snackbar","open","autoHideDuration","onClose","severity","v1","ChangeTodolistFilter","id","filter","changeTodolistEntityStatus","entityStatus","ChangeTaskEntityStatus","UpdateTaskThunk","domainModel","getState","currentTask","tasks","find","t","description","priority","startDate","deadline","UpdateTask","catch","message","console","warn","AddItemForm","memo","log","useState","setTitle","setError","addTask","trim","addItemCallBack","padding","TextField","helperText","label","onChange","e","currentTarget","onKeyPress","charCode","marginRight","disabled","LibraryAddOutlined","EditableSpan","editMode","setEditMode","changeEditMode","entityTaskStatus","onBlur","onChangeCallBack","autoFocus","onDoubleClick","Task","task","onChangeTaskTitle","useCallback","newTitle","className","s","Completed","isDone","Checkbox","checked","todoListId","New","RemoveTask","DeleteTaskThunk","HighlightOffOutlined","Todolist","tasksForTodolist","item","AddTask","length","AddTaskThunk","changeTodolistTitle","ChangeTodolistTitle","ChangeTodolistTitleThunk","removeTodolist","RemoveTodolistThunk","onAllFilter","onActiveFilter","onCompletedFilter","useEffect","items","map","SetTasks","GetTasksThunk","i","container","span","deleteTodolistIcon","DeleteOutlined","TodolistsList","addNewTodolist","AddTodolist","CreateTodolistThunk","todolists","Container","Grid","tl","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","handleSubmit","FormControl","FormLabel","target","FormGroup","getFieldProps","margin","touched","FormControlLabel","control","App","finally","fixed","exact","path","render","from","Boolean","window","location","hostname","match","RootReducer","combineReducers","action","copyState","forEach","td","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.eedb58d5.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\nimport {TaskType} from \"../redux/tasks-Reducer\";\r\n\r\nlet instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1dbc4cf7-1f30-4d66-936b-be5fca3239ce'\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginPayloadType) {\r\n        return instance.post<LoginPayloadType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, payload)\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n    ,\r\n    authMe() {\r\n        return instance.get<ResponseType<MeResponseType>>(`auth/me`)\r\n    }\r\n}\r\n\r\n///////////////////////////// TYPE\r\n\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginPayloadType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\nexport type UpdateTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedIn} from \"./loggin-Reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nlet initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\ntype ActionType =\r\n    ReturnType<typeof changeAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setInitialize>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CHANGE-STATUS\":\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case \"SET-APP-ERROR\":\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        case \"SET-INITIALIZE\":\r\n            return {\r\n                ...state, isInitialized: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n////////// AC\r\nexport const changeAppStatus = (status: RequestStatusType) => ({type: 'CHANGE-STATUS', status}) as const\r\nexport const setAppError = (error: string | null) => ({type: 'SET-APP-ERROR', error}) as const\r\nexport const setInitialize = (value: boolean) => ({type: 'SET-INITIALIZE', value}) as const\r\n\r\n\r\n///////// THUNK\r\n\r\nexport const intializeAppThunk = () => (dispatch: Dispatch) => {\r\n    authAPI.authMe().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setInitialize(true))\r\n            dispatch(setIsLoggedIn(true))\r\n\r\n        } else {\r\n        }\r\n    }).finally(() => {\r\n        dispatch(setInitialize(true))\r\n    })\r\n}","import {Dispatch} from \"redux\";\r\nimport {changeAppStatus, setAppError} from \"./app-Reducer\";\r\nimport {authAPI, LoginPayloadType} from \"../api/todolists-api\";\r\n\r\ntype InitialStateType = {\r\n    isLogged: boolean\r\n}\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>\r\n\r\nlet initialState: InitialStateType = {\r\n    isLogged: false\r\n}\r\n\r\nexport const logginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"IS-LOGGED-IN\":\r\n            return {...state, isLogged: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n////////// AC\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'IS-LOGGED-IN', value}) as const\r\n\r\n\r\n///////// THUNK\r\nexport const loginThunk = (payload: LoginPayloadType) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    authAPI.login(payload).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(changeAppStatus('succeeded'))\r\n        } else {\r\n            dispatch(setAppError(res.data.messages[0]))\r\n            dispatch(changeAppStatus('failed'))\r\n        }\r\n    })\r\n}\r\n\r\nexport const logOutThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    authAPI.logOut().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(false))\r\n            dispatch(changeAppStatus('succeeded'))\r\n        } else {\r\n            dispatch(setAppError(res.data.messages[0]))\r\n            dispatch(changeAppStatus('failed'))\r\n        }\r\n    })\r\n}\r\n","import MenuIcon from '@mui/icons-material/Menu';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport * as React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/redux/store\";\r\nimport {logOutThunk} from \"../../state/redux/loggin-Reducer\";\r\n\r\nexport const Header = () => {\r\n\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.loggin.isLogged)\r\n    const dispatch = useDispatch()\r\n    const logOutHandler = () => dispatch(logOutThunk())\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\" color=\"transparent\">\r\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    {isLoggedIn ? <Button onClick={() => logOutHandler()} color=\"inherit\">logOut</Button> :\r\n                        <Button href={'/login'} color=\"inherit\">login</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nexport default function LinearBuffer() {\r\n    const [progress, setProgress] = React.useState(0);\r\n    const [buffer, setBuffer] = React.useState(10);\r\n\r\n    const progressRef = React.useRef(() => {});\r\n    React.useEffect(() => {\r\n        progressRef.current = () => {\r\n            if (progress > 100) {\r\n                setProgress(0);\r\n                setBuffer(10);\r\n            } else {\r\n                const diff = Math.random() * 10;\r\n                const diff2 = Math.random() * 10;\r\n                setProgress(progress + diff);\r\n                setBuffer(progress + diff + diff2);\r\n            }\r\n        };\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            progressRef.current();\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <LinearProgress variant=\"buffer\"  value={progress} valueBuffer={buffer} />\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/redux/store\";\r\nimport {setAppError} from \"../../state/redux/app-Reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorBar() {\r\n    let dispatch = useDispatch()\r\n    let error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import {v1} from \"uuid\";\r\nimport {todolistsAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeAppStatus, RequestStatusType, setAppError} from \"./app-Reducer\";\r\n\r\n\r\nexport const todolistId1 = v1()\r\nexport const todolistId2 = v1()\r\n\r\ntype ActionsType = ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof ChangeTodolistTitle>\r\n    | ReturnType<typeof ChangeTodolistFilter>\r\n    | ReturnType<typeof SetTodolists>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n\r\nexport type FilterType = \"all\" | \"completed\" | \"active\"\r\n\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type TodolistDomainType = TodolistType & { filter: FilterType, entityStatus: RequestStatusType }\r\n\r\nlet initialState: Array<TodolistDomainType>  = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(td => td.id !== action.id)\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.payload, filter: \"all\" , entityStatus: \"idle\"},...state ]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(td => td.id === action.id ? {...td, title: action.title } : td)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(td => td.id === action.id ? {...td, filter: action.filter} : td)\r\n        case \"SET-TODOLISTS\":\r\n            return  action.todolists.map(t => ({...t , filter: \"all\", entityStatus: \"idle\"}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(td => td.id === action.todolistId ? {...td, entityStatus: action.entityStatus} : td )\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n///////////////////////// AC\r\n\r\nexport const RemoveTodolist = (id: string) => ({type: \"REMOVE-TODOLIST\", id}) as const\r\nexport const AddTodolist = (title: string, payload: TodolistType) => ({type: \"ADD-TODOLIST\", title , payload }) as const\r\nexport const ChangeTodolistTitle = (id: string, title: string) => ({type:\"CHANGE-TODOLIST-TITLE\" , id, title }) as const\r\nexport const ChangeTodolistFilter = (id: string, filter: FilterType) => ({type: \"CHANGE-TODOLIST-FILTER\", id, filter}) as const\r\nexport const SetTodolists = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists}) as const\r\nexport const changeTodolistEntityStatus = (todolistId: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId , entityStatus}) as const\r\n////////////////////// THUNK\r\n\r\nexport const GetTodolistsThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then((res)=>{\r\n            dispatch(SetTodolists(res.data))\r\n            dispatch(changeAppStatus('succeeded'))\r\n    }).catch((error) => {\r\n        setAppError(error.message)\r\n        console.log(error.message)\r\n        dispatch(changeAppStatus('failed'))\r\n    })\r\n}\r\n\r\nexport const CreateTodolistThunk = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    todolistsAPI.createTodolist(title).then( (res) => {\r\n       if(res.data.resultCode === 0 ) {\r\n           let payload: TodolistType = res.data.data.item\r\n           dispatch(AddTodolist(title,payload))\r\n           dispatch(changeAppStatus('succeeded'))\r\n       } else {\r\n           if(res.data.messages.length > 0) {\r\n               dispatch(setAppError(res.data.messages[0]))\r\n               dispatch(changeAppStatus('succeeded'))\r\n           } else {\r\n               dispatch(setAppError('some error'))\r\n               dispatch(changeAppStatus('succeeded'))\r\n           }\r\n       }\r\n    })\r\n}\r\n\r\nexport const RemoveTodolistThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId).then(()=> {\r\n            dispatch(RemoveTodolist(todolistId))\r\n            dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\n\r\nexport const ChangeTodolistTitleThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\r\n    todolistsAPI.updateTodolist(todolistId,title).then(() => {\r\n        dispatch(ChangeTodolistTitle(todolistId,title))\r\n        dispatch(changeAppStatus('succeeded'))\r\n        dispatch(changeTodolistEntityStatus(todolistId, 'succeeded'))\r\n    })\r\n}\r\n","import {AddTodolist, changeTodolistEntityStatus, RemoveTodolist, SetTodolists} from \"./todolists-Reducer\";\r\nimport {TaskPriorities, TaskStatuses, todolistsAPI, UpdateTaskType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {changeAppStatus, RequestStatusType, setAppError} from \"./app-Reducer\";\r\n\r\n\r\n///////////////////////// TYPE\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskEntityType>\r\n}\r\n\r\nexport type TaskType = {\r\n\r\n    id: string,\r\n    title: string,\r\n    description: string,\r\n    todoListId: string,\r\n    order: number,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    addedDate: string\r\n\r\n}\r\nexport type TaskEntityType = TaskType & {entityStatus: RequestStatusType}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof AddTask>\r\n    | ReturnType<typeof RemoveTask>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof SetTodolists>\r\n    | ReturnType<typeof SetTasks>\r\n    | ReturnType<typeof UpdateTask>\r\n    | ReturnType<typeof ChangeTaskEntityStatus>\r\n\r\n//////////////////////////////////////\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n\r\n        case \"ADD-TASK\": {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        }\r\n        case \"UPDATE-TASK\":\r\n            return {...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)}\r\n\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.payload.id]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case \"SET-TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(t => copyState[t.id] = [])\r\n            return copyState\r\n        }\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map((t) => t.id === action.taskId ? {...t, entityStatus: action.entityStatus}: t)\r\n            }\r\n        case \"SET-TASKS\": {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////// AC\r\nexport const AddTask = (task: TaskEntityType) => ({type: \"ADD-TASK\", task}) as const\r\nexport const RemoveTask = (taskId: string, todolistId: string) => ({type: \"REMOVE-TASK\", taskId, todolistId}) as const\r\nexport const UpdateTask = (todolistId: string, taskId: string, model: UpdateTaskType) =>\r\n    ({type: 'UPDATE-TASK', todolistId, taskId, model}) as const\r\n\r\nexport const SetTasks = (tasks: TaskEntityType[], todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId}) as const\r\nexport const ChangeTaskEntityStatus = (todolistId: string, taskId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TASK-ENTITY-STATUS', todolistId , entityStatus, taskId}) as const\r\n\r\n\r\n////////////////////////// THUNK\r\n\r\nexport const GetTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    return todolistsAPI.getTasks(todolistId).then((res) => {\r\n        let tasks = res.data.items.map((t)=> ({...t, entityStatus: 'idle' as RequestStatusType})) /*Добавляем такске ЭнтитиСтатус*/\r\n        dispatch(SetTasks(tasks, todolistId))\r\n        dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\nexport const DeleteTaskThunk = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    dispatch(ChangeTaskEntityStatus(todolistId,taskId, 'loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId).then(() => {\r\n        dispatch(RemoveTask(taskId, todolistId))\r\n        dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\n\r\nexport const AddTaskThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\r\n    todolistsAPI.createTask(todolistId, title).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            let task = {...res.data.data.item, entityStatus: 'idle' as RequestStatusType} /*Добавляем такске ЭнтитиСтатус*/\r\n            dispatch(AddTask(task))\r\n            dispatch(changeAppStatus('succeeded'))\r\n            dispatch(changeTodolistEntityStatus(todolistId, 'idle'))\r\n        } else {\r\n            if (res.data.messages.length > 0) {\r\n                dispatch(setAppError(res.data.messages[0]))\r\n                dispatch(changeAppStatus('succeeded'))\r\n                dispatch(changeTodolistEntityStatus(todolistId, 'idle'))\r\n            } else {\r\n                dispatch(setAppError('some error'))\r\n                dispatch(changeTodolistEntityStatus(todolistId, 'idle'))\r\n                dispatch(changeAppStatus('failed'))\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const UpdateTaskThunk = (todolistId: string, taskId: string, domainModel: UpdateTaskType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(changeAppStatus('loading'))\r\n        dispatch(ChangeTaskEntityStatus(todolistId,taskId, 'loading'))\r\n        let currentTask = getState().tasks[todolistId].find((t) => t.id === taskId) //Достаём нужную таску\r\n        if (currentTask) {\r\n            let model: UpdateTaskType = {\r\n                title: currentTask.title,\r\n                description: currentTask.description,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                ...domainModel\r\n            }\r\n\r\n            todolistsAPI.updateTask(todolistId, taskId, model).then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(UpdateTask(todolistId, taskId, model))\r\n                    dispatch(changeAppStatus('succeeded'))\r\n                    dispatch(ChangeTaskEntityStatus(todolistId,taskId, 'succeeded'))\r\n                } else {\r\n                    dispatch(setAppError(res.data.messages[0]))\r\n                    dispatch(changeAppStatus('failed'))\r\n                    dispatch(ChangeTaskEntityStatus(todolistId,taskId, 'succeeded'))\r\n                }\r\n            }).catch(error => {\r\n                dispatch(setAppError(error.message))\r\n                dispatch(changeAppStatus('failed'))\r\n            })\r\n\r\n        } else {\r\n            console.warn('task not found in state')\r\n        }\r\n\r\n    }","import {LibraryAddOutlined} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    addItemCallBack: (title: string) => void\r\n    disabled?: boolean\r\n\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: PropsType) => {\r\n    console.log('ADD ITEM FORM')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItemCallBack(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Text incorrect\")\r\n        }\r\n    }\r\n\r\n    return (<div style={{padding: \"10px\"}}>\r\n        <TextField helperText={error} value={title} label={\"Type\"} onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}/>\r\n        <Button style={{marginRight: '-10px'}} size={\"large\"} variant={\"text\"} onClick={addTask} disabled={props.disabled}>\r\n            <LibraryAddOutlined/>\r\n        </Button>\r\n    </div>)\r\n})","import TextField from \"@mui/material/TextField/TextField\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\nimport {RequestStatusType} from \"../../state/redux/app-Reducer\";\r\n\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeCallBack: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n    entityTaskStatus?: RequestStatusType\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('SPAN RENDER')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const changeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const onBlurEffect = () => {\r\n        setEditMode(false)\r\n        props.onChangeCallBack(title)\r\n    }\r\n\r\n    return (editMode ?\r\n        <TextField disabled={props.entityStatus === 'loading' || props.entityTaskStatus === 'loading'} onBlur={onBlurEffect} autoFocus onDoubleClick={changeEditMode} onChange={onChangeTitleHandler} value={title} />\r\n        : <span onDoubleClick={changeEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {DeleteTaskThunk, TaskType, UpdateTaskThunk} from \"../../state/redux/tasks-Reducer\";\r\nimport s from \"../Todolist/Todolist.module.css\";\r\nimport {Button, Checkbox} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {HighlightOffOutlined} from \"@mui/icons-material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses} from \"../../state/api/todolists-api\";\r\nimport {RequestStatusType} from \"../../state/redux/app-Reducer\";\r\n\r\ntype PropsTaskType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo(({task, todolistId, entityStatus}: PropsTaskType) => {\r\n\r\n    let dispatch = useDispatch()\r\n    const onDeleteHandler = () => dispatch(DeleteTaskThunk(task.id, todolistId)) // удаление таски\r\n    const onIsDoneHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(UpdateTaskThunk(task.todoListId, task.id, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}))  /*смена статуса таски ,  если чекд true - тогда Completed иначе New*/\r\n\r\n    }\r\n    const onChangeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(UpdateTaskThunk(todolistId, task.id, {title: newTitle})) // смена имени таски\r\n    }, [dispatch, task.id, todolistId])\r\n\r\n\r\n    return <div className={`${s.tasks} ${task.status === TaskStatuses.Completed ? s.isDone : ''}`}\r\n                key={task.id}>  {/*Если ТаскСтатус = Комплетед - тогда навешивается стиль, иначе пустая строка*/}\r\n\r\n\r\n        <div>\r\n            <Checkbox disabled={entityStatus === 'loading'} size={'small'}\r\n                      checked={task.status === TaskStatuses.Completed}\r\n                      onChange={onIsDoneHandler}/> {/*Если ТаскСтатус = Комплетед, тогда значение Checked будет true */}\r\n\r\n            <EditableSpan entityTaskStatus={entityStatus} title={task.title} onChangeCallBack={onChangeTaskTitle}/>\r\n        </div>\r\n        <div>\r\n            <Button disabled={entityStatus === 'loading'} size={\"small\"} onClick={onDeleteHandler}>\r\n                <HighlightOffOutlined/>\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import {DeleteOutlined} from \"@mui/icons-material\";\r\nimport {Button} from \"@mui/material\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/redux/store\";\r\nimport {AddTaskThunk, GetTasksThunk, TaskEntityType, TaskType} from \"../../state/redux/tasks-Reducer\";\r\nimport {ChangeTodolistFilter, ChangeTodolistTitleThunk, RemoveTodolistThunk} from \"../../state/redux/todolists-Reducer\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport s from './Todolist.module.css';\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses} from \"../../state/api/todolists-api\";\r\nimport {RequestStatusType} from \"../../state/redux/app-Reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    filter: string\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({todolistId, title, filter, entityStatus}: TodolistPropsType) => {\r\n        console.log('TODOLIST')\r\n\r\n        let dispatch = useDispatch()\r\n        let tasksForTodolist = useSelector<AppRootStateType, Array<TaskEntityType>>(state => state.tasks[todolistId])\r\n\r\n        const addTask = useCallback((title: string) => dispatch(AddTaskThunk(todolistId, title)), [todolistId, dispatch])\r\n        const changeTodolistTitle = useCallback((newTitle: string) => dispatch(ChangeTodolistTitleThunk(todolistId, newTitle)), [dispatch, todolistId])\r\n        const removeTodolist = useCallback(() => dispatch(RemoveTodolistThunk(todolistId)), [dispatch, todolistId])\r\n\r\n        const onAllFilter = useCallback(() => dispatch(ChangeTodolistFilter(todolistId, \"all\")), [todolistId, dispatch])\r\n        const onActiveFilter = useCallback(() => dispatch(ChangeTodolistFilter(todolistId, \"active\")), [todolistId, dispatch])\r\n        const onCompletedFilter = useCallback(() => dispatch(ChangeTodolistFilter(todolistId, \"completed\")), [todolistId, dispatch])\r\n\r\n        useEffect(() => {\r\n            dispatch(GetTasksThunk(todolistId))\r\n        }, [dispatch, todolistId])\r\n\r\n        if (filter === \"active\") {\r\n\r\n            tasksForTodolist = tasksForTodolist.filter((i) => i.status === TaskStatuses.New)\r\n\r\n        }\r\n        if (filter === \"completed\") {\r\n\r\n            tasksForTodolist = tasksForTodolist.filter(i => i.status === TaskStatuses.Completed)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={s.container}>\r\n\r\n                <h3 className={s.span}>\r\n                    <div>\r\n                        <EditableSpan entityStatus={entityStatus} title={title} onChangeCallBack={changeTodolistTitle}/>\r\n                    </div>\r\n                    <div className={s.deleteTodolistIcon}>\r\n                        <Button size={\"small\"} onClick={removeTodolist} disabled={entityStatus === 'loading'}>\r\n                            <DeleteOutlined/>\r\n                        </Button>\r\n                    </div>\r\n                </h3>\r\n                <AddItemForm addItemCallBack={addTask} disabled={entityStatus === 'loading'}/>\r\n                <div>\r\n                    {tasksForTodolist.map(t =>\r\n                        <Task  task={t} todolistId={todolistId} key={t.id} entityStatus={t.entityStatus}/>\r\n                    )}\r\n                </div>\r\n                <div className={s.status}>\r\n                    <Button size={\"small\"} variant={filter === \"all\" ? \"contained\" : \"text\"}\r\n                            onClick={onAllFilter}>All</Button>\r\n                    <Button size={\"small\"} color={\"primary\"} variant={filter === \"active\" ? \"contained\" : \"text\"}\r\n                            onClick={onActiveFilter}>Active\r\n                    </Button>\r\n                    <Button size={\"small\"} color={\"warning\"} variant={filter === \"completed\" ? \"contained\" : \"text\"}\r\n                            onClick={onCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n)\r\n\r\n","import Grid from \"@mui/material/Grid/Grid\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\nimport {Todolist} from \"../Todolist/Todolist\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {CreateTodolistThunk, GetTodolistsThunk, TodolistDomainType} from \"../../state/redux/todolists-Reducer\";\r\nimport Container from \"@mui/material/Container/Container\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/redux/store\";\r\nimport {RequestStatusType} from \"../../state/redux/app-Reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    status: RequestStatusType\r\n}\r\nexport const TodolistsList = (props: PropsType) => {\r\n    let dispatch = useDispatch()\r\n    const addNewTodolist = useCallback((title: string) => dispatch(CreateTodolistThunk(title)), [dispatch])\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.loggin.isLogged)\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    useEffect(() => {\r\n        dispatch(GetTodolistsThunk())\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Container>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItemCallBack={addNewTodolist} disabled={props.status === 'loading'}/>\r\n            </Grid>\r\n            <Grid container spacing={1}>\r\n                {todolists.map((tl) => {\r\n\r\n                    return <Grid item>\r\n                        <Paper style={{padding: \"20px\"}}>\r\n                            <Todolist key={tl.id} todolistId={tl.id} title={tl.title} filter={tl.filter}\r\n                                      entityStatus={tl.entityStatus}\r\n\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        </Container>\r\n\r\n    </>\r\n}","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../../state/redux/loggin-Reducer\";\r\nimport {AppRootStateType} from \"../../state/redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport ErrorBar from \"../ErrorBar/ErrorBar\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.loggin.isLogged)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginThunk(values))\r\n            formik.resetForm({\r\n                values: {email: '', password: '', rememberMe: false},\r\n            });\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length <= 2) {\r\n                errors.password = 'Length of password should be more then 2'\r\n            }\r\n            return errors;\r\n        },\r\n\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField {...formik.getFieldProps('email')} label=\"Email\" margin=\"normal\"/>\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n\r\n                        <TextField {...formik.getFieldProps('password')} type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"/>\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    </form>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport './App.css';\r\nimport {Header} from './components/AppBar/AppBar';\r\nimport {AppRootStateType} from \"./state/redux/store\";\r\nimport LinearBuffer from \"./components/temp/Preloader\";\r\nimport {intializeAppThunk, RequestStatusType} from \"./state/redux/app-Reducer\";\r\nimport ErrorBar from \"./components/ErrorBar/ErrorBar\";\r\nimport {TodolistsList} from \"./components/TodolistsList/TodolistsList\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {LinearProgress} from \"@mui/material\";\r\nimport Container from \"@mui/material/Container/Container\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector((state: AppRootStateType) => state.app.isInitialized)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(intializeAppThunk())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <LinearProgress/>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <ErrorBar/>\r\n            {status === 'loading' && <LinearBuffer/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList status={status}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>page not found</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-Reducer\";\r\nimport {todolistsReducer} from \"./todolists-Reducer\";\r\nimport thunk from \"redux-thunk\"\r\nimport {appReducer} from \"./app-Reducer\";\r\nimport {logginReducer} from \"./loggin-Reducer\";\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    loggin: logginReducer\r\n})\r\n\r\nexport const store = createStore(RootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof RootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/redux/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todolist_container__2-MrN\",\"span\":\"Todolist_span__i5ptW\",\"deleteTodolistIcon\":\"Todolist_deleteTodolistIcon__20CNq\",\"tasks\":\"Todolist_tasks__lJ4gM\",\"isDone\":\"Todolist_isDone__yiSji\",\"status\":\"Todolist_status__1cgdq\"};"],"sourceRoot":""}