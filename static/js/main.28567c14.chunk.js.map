{"version":3,"sources":["state/api/todolists-api.ts","components/AddItemForm/AddItemForm.tsx","components/AppBar/AppBar.tsx","state/app-Reducer.ts","state/todolists-Reducer.ts","state/tasks-Reducer.ts","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","components/temp/Preloader.tsx","components/ErrorBar/ErrorBar.tsx","App.tsx","serviceWorker.ts","state/redux/store.ts","index.tsx","components/Todolist/Todolist.module.css"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTask","trim","addItemCallBack","style","padding","TextField","helperText","value","label","onChange","e","currentTarget","onKeyPress","charCode","Button","marginRight","size","variant","onClick","disabled","LibraryAddOutlined","Header","Box","sx","flexGrow","AppBar","position","color","Toolbar","display","justifyContent","IconButton","edge","mr","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","taskId","model","initialState","status","changeAppStatus","type","setAppError","v1","ChangeTodolistFilter","id","filter","changeTodolistEntityStatus","entityStatus","UpdateTaskThunk","domainModel","dispatch","getState","currentTask","tasks","find","t","description","priority","startDate","deadline","then","res","data","resultCode","UpdateTask","warn","EditableSpan","editMode","setEditMode","changeEditMode","onBlur","onChangeCallBack","autoFocus","onDoubleClick","Task","task","useDispatch","onChangeTaskTitle","useCallback","newTitle","className","s","Completed","isDone","Checkbox","checked","todoListId","New","RemoveTask","DeleteTaskThunk","HighlightOffOutlined","Todolist","tasksForTodolist","useSelector","state","item","AddTask","messages","length","AddTaskThunk","changeTodolistTitle","ChangeTodolistTitle","ChangeTodolistTitleThunk","removeTodolist","RemoveTodolistThunk","onAllFilter","onActiveFilter","onCompletedFilter","useEffect","items","SetTasks","GetTasksThunk","i","container","span","deleteTodolistIcon","DeleteOutlined","map","LinearBuffer","progress","setProgress","buffer","setBuffer","progressRef","current","diff","Math","random","diff2","timer","setInterval","clearInterval","width","LinearProgress","valueBuffer","Alert","ref","elevation","ErrorBar","app","handleClose","event","reason","Stack","spacing","Snackbar","open","autoHideDuration","onClose","severity","App","addNewTodolist","payload","AddTodolist","CreateTodolistThunk","todolists","Container","Grid","tl","Paper","Boolean","window","location","hostname","match","RootReducer","combineReducers","action","copyState","forEach","td","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.28567c14.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\nimport {TaskType} from \"../tasks-Reducer\";\r\n\r\nlet instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1dbc4cf7-1f30-4d66-936b-be5fca3239ce'\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{title: string}, AxiosResponse<ResponseType<{item: TaskType}>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskType,AxiosResponse<ResponseType<{item: TaskType}>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n///////////////////////////// TYPE\r\ntype TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\n\r\nexport type UpdateTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}","import {LibraryAddOutlined} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    addItemCallBack: (title: string) => void\r\n    disabled?: boolean\r\n\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: PropsType) => {\r\n    console.log('ADD ITEM FORM')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItemCallBack(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Text incorrect\")\r\n        }\r\n    }\r\n\r\n    return (<div style={{padding: \"10px\"}}>\r\n        <TextField helperText={error} value={title} label={\"Type\"} onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}/>\r\n        <Button style={{marginRight: '-10px'}} size={\"large\"} variant={\"text\"} onClick={addTask} disabled={props.disabled}>\r\n            <LibraryAddOutlined/>\r\n        </Button>\r\n    </div>)\r\n})","import MenuIcon from '@mui/icons-material/Menu';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport * as React from 'react';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\" color=\"transparent\">\r\n                <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\nlet initialState: InitialStateType = {\r\n    status: 'loading',\r\n    error: null\r\n}\r\n\r\ntype ActionType =\r\n    ReturnType<typeof changeAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CHANGE-STATUS\":\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case \"SET-APP-ERROR\":\r\n            return  {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const changeAppStatus = (status: RequestStatusType) => ({type: 'CHANGE-STATUS', status}) as const\r\nexport const setAppError = (error: string | null) => ({type: 'SET-APP-ERROR' , error}) as const","import {v1} from \"uuid\";\r\nimport {todolistsAPI} from \"./api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeAppStatus, RequestStatusType, setAppError} from \"./app-Reducer\";\r\n\r\n\r\n\r\nexport const todolistId1 = v1()\r\nexport const todolistId2 = v1()\r\n\r\ntype ActionsType = ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof ChangeTodolistTitle>\r\n    | ReturnType<typeof ChangeTodolistFilter>\r\n    | ReturnType<typeof SetTodolists>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n\r\nexport type FilterType = \"all\" | \"completed\" | \"active\"\r\n\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type TodolistDomainType = TodolistType & { filter: FilterType, entityStatus: RequestStatusType }\r\n\r\nlet initialState: Array<TodolistDomainType>  = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(td => td.id !== action.id)\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.payload, filter: \"all\" , entityStatus: \"idle\"},...state ]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(td => td.id === action.id ? {...td, title: action.title } : td)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(td => td.id === action.id ? {...td, filter: action.filter} : td)\r\n        case \"SET-TODOLISTS\":\r\n            return  action.todolists.map(t => ({...t , filter: \"all\", entityStatus: \"idle\"}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(td => td.id === action.todolistId ? {...td, entityStatus: action.entityStatus} : td )\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n///////////////////////// AC\r\n\r\nexport const RemoveTodolist = (id: string) => ({type: \"REMOVE-TODOLIST\", id}) as const\r\nexport const AddTodolist = (title: string, payload: TodolistType) => ({type: \"ADD-TODOLIST\", title , payload }) as const\r\nexport const ChangeTodolistTitle = (id: string, title: string) => ({type:\"CHANGE-TODOLIST-TITLE\" , id, title }) as const\r\nexport const ChangeTodolistFilter = (id: string, filter: FilterType) => ({type: \"CHANGE-TODOLIST-FILTER\", id, filter}) as const\r\nexport const SetTodolists = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists}) as const\r\nexport const changeTodolistEntityStatus = (todolistId: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId , entityStatus}) as const\r\n////////////////////// THUNK\r\n\r\nexport const GetTodolistsThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    return todolistsAPI.getTodolists()\r\n        .then((res)=>{\r\n            dispatch(SetTodolists(res.data))\r\n            dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\n\r\nexport const CreateTodolistThunk = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    todolistsAPI.createTodolist(title).then( (res) => {\r\n       if(res.data.resultCode === 0 ) {\r\n           let payload: TodolistType = res.data.data.item\r\n           dispatch(AddTodolist(title,payload))\r\n           dispatch(changeAppStatus('succeeded'))\r\n       } else {\r\n           if(res.data.messages.length > 0) {\r\n               dispatch(setAppError(res.data.messages[0]))\r\n               dispatch(changeAppStatus('succeeded'))\r\n           } else {\r\n               dispatch(setAppError('some error'))\r\n               dispatch(changeAppStatus('succeeded'))\r\n           }\r\n       }\r\n    })\r\n}\r\n\r\nexport const RemoveTodolistThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId).then(()=> {\r\n            dispatch(RemoveTodolist(todolistId))\r\n            dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\n\r\nexport const ChangeTodolistTitleThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    todolistsAPI.updateTodolist(todolistId,title).then(() => {\r\n        dispatch(ChangeTodolistTitle(todolistId,title))\r\n        dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\n","import {AddTodolist, changeTodolistEntityStatus, RemoveTodolist, SetTodolists} from \"./todolists-Reducer\";\r\nimport {TaskPriorities, TaskStatuses, todolistsAPI, UpdateTaskType} from \"./api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./redux/store\";\r\nimport {changeAppStatus, setAppError} from \"./app-Reducer\";\r\n\r\n\r\n///////////////////////// TYPE\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TaskType = {\r\n\r\n    id: string,\r\n    title: string,\r\n    description: string,\r\n    todoListId: string,\r\n    order: number,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    addedDate: string\r\n\r\n}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof AddTask>\r\n    | ReturnType<typeof RemoveTask>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof SetTodolists>\r\n    | ReturnType<typeof SetTasks>\r\n    | ReturnType<typeof UpdateTask>\r\n\r\n//////////////////////////////////////\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n\r\n        case \"ADD-TASK\":\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case \"UPDATE-TASK\":\r\n            return {...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)}\r\n\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.payload.id]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case \"SET-TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(t => copyState[t.id] = [])\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\": {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////// AC\r\nexport const AddTask = (task: TaskType) => ({type: \"ADD-TASK\", task}) as const\r\nexport const RemoveTask = (taskId: string, todolistId: string) => ({type: \"REMOVE-TASK\", taskId, todolistId}) as const\r\nexport const UpdateTask = (todolistId: string, taskId: string, model: UpdateTaskType) =>\r\n    ({type: 'UPDATE-TASK', todolistId, taskId, model}) as const\r\n\r\nexport const SetTasks = (tasks: TaskType[], todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId}) as const\r\n\r\n////////////////////////// THUNK\r\n\r\nexport const GetTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    return todolistsAPI.getTasks(todolistId).then((res) => {\r\n        let tasks = res.data.items\r\n        dispatch(SetTasks(tasks, todolistId))\r\n        dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\nexport const DeleteTaskThunk = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId).then(() => {\r\n        dispatch(RemoveTask(taskId, todolistId))\r\n        dispatch(changeAppStatus('succeeded'))\r\n    })\r\n}\r\n\r\nexport const AddTaskThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\r\n    todolistsAPI.createTask(todolistId, title).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            let task = res.data.data.item\r\n            dispatch(AddTask(task))\r\n            dispatch(changeAppStatus('succeeded'))\r\n            dispatch(changeTodolistEntityStatus(todolistId, 'idle'))\r\n        } else {\r\n            if (res.data.messages.length > 0) {\r\n                dispatch(setAppError(res.data.messages[0]))\r\n                dispatch(changeAppStatus('succeeded'))\r\n                dispatch(changeTodolistEntityStatus(todolistId, 'idle'))\r\n            } else {\r\n                dispatch(setAppError('some error'))\r\n                dispatch(changeAppStatus('succeeded'))\r\n                dispatch(changeTodolistEntityStatus(todolistId, 'idle'))\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const UpdateTaskThunk = (todolistId: string, taskId: string, domainModel: UpdateTaskType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(changeAppStatus('loading'))\r\n        let currentTask = getState().tasks[todolistId].find((t) => t.id === taskId) //Достаём нужную таску\r\n        if (currentTask) {\r\n            let model: UpdateTaskType = {\r\n                title: currentTask.title,\r\n                description: currentTask.description,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                ...domainModel\r\n            }\r\n\r\n            todolistsAPI.updateTask(todolistId, taskId, model).then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(UpdateTask(todolistId, taskId, model))\r\n                    dispatch(changeAppStatus('succeeded'))\r\n                }\r\n            })\r\n\r\n        } else {\r\n            console.warn('task not found in state')\r\n        }\r\n\r\n    }","import TextField from \"@mui/material/TextField/TextField\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeCallBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('SPAN RENDER')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const changeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const onBlurEffect = () => {\r\n        setEditMode(false)\r\n        props.onChangeCallBack(title)\r\n    }\r\n\r\n    return (editMode ?\r\n        <TextField onBlur={onBlurEffect} autoFocus onDoubleClick={changeEditMode} onChange={onChangeTitleHandler} value={title} />\r\n        : <span onDoubleClick={changeEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {DeleteTaskThunk, TaskType, UpdateTaskThunk} from \"../../state/tasks-Reducer\";\r\nimport s from \"../Todolist/Todolist.module.css\";\r\nimport {Button, Checkbox} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {HighlightOffOutlined} from \"@mui/icons-material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses} from \"../../state/api/todolists-api\";\r\n\r\ntype PropsTaskType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo(({task, todolistId}: PropsTaskType) => {\r\n    console.log('TASK RENDER')\r\n    let dispatch = useDispatch()\r\n    const onDeleteHandler = () => dispatch(DeleteTaskThunk(task.id , todolistId)) // удаление таски\r\n    const onIsDoneHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(UpdateTaskThunk(task.todoListId, task.id, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New }))  /*смена статуса таски ,  если чекд true - тогда Completed иначе New*/\r\n\r\n    }\r\n    const onChangeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(UpdateTaskThunk(todolistId,task.id, {title: newTitle})) // смена имени таски\r\n    }, [dispatch, task.id, todolistId])\r\n\r\n\r\n    return <div className={`${s.tasks} ${task.status === TaskStatuses.Completed ? s.isDone : ''}`} key={task.id}>  {/*Если ТаскСтатус = Комплетед - тогда навешивается стиль, иначе пустая строка*/}\r\n\r\n\r\n        <div>\r\n            <Checkbox size={'small'} checked={task.status === TaskStatuses.Completed} onChange={onIsDoneHandler}/> {/*Если ТаскСтатус = Комплетед, тогда значение Checked будет true */}\r\n\r\n            <EditableSpan title={task.title} onChangeCallBack={onChangeTaskTitle}/>\r\n        </div>\r\n        <div>\r\n            <Button size={\"small\"} onClick={onDeleteHandler}>\r\n                <HighlightOffOutlined/>\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import {DeleteOutlined} from \"@mui/icons-material\";\r\nimport {Button} from \"@mui/material\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/redux/store\";\r\nimport {AddTaskThunk, GetTasksThunk, TaskType} from \"../../state/tasks-Reducer\";\r\nimport {ChangeTodolistFilter, ChangeTodolistTitleThunk, RemoveTodolistThunk} from \"../../state/todolists-Reducer\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport s from './Todolist.module.css';\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses} from \"../../state/api/todolists-api\";\r\nimport {RequestStatusType} from \"../../state/app-Reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    filter: string\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({todolistId, title, filter, entityStatus}: TodolistPropsType) => {\r\n        console.log('TODOLIST')\r\n\r\n        let dispatch = useDispatch()\r\n        let tasksForTodolist = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todolistId])\r\n\r\n        const addTask = useCallback((title: string) => dispatch(AddTaskThunk(todolistId, title)), [todolistId, dispatch])\r\n        const changeTodolistTitle = useCallback((newTitle: string) => dispatch(ChangeTodolistTitleThunk(todolistId, newTitle)), [dispatch, todolistId])\r\n        const removeTodolist = useCallback(() => dispatch(RemoveTodolistThunk(todolistId)), [dispatch, todolistId])\r\n\r\n        const onAllFilter = useCallback(() => dispatch(ChangeTodolistFilter(todolistId, \"all\")), [todolistId, dispatch])\r\n        const onActiveFilter = useCallback(() => dispatch(ChangeTodolistFilter(todolistId, \"active\")), [todolistId, dispatch])\r\n        const onCompletedFilter = useCallback(() => dispatch(ChangeTodolistFilter(todolistId, \"completed\")), [todolistId, dispatch])\r\n\r\n        useEffect(() => {\r\n            dispatch(GetTasksThunk(todolistId))\r\n        }, [dispatch, todolistId])\r\n\r\n        if (filter === \"active\") {\r\n\r\n            tasksForTodolist = tasksForTodolist.filter((i) => i.status === TaskStatuses.New)\r\n\r\n        }\r\n        if (filter === \"completed\") {\r\n\r\n            tasksForTodolist = tasksForTodolist.filter(i => i.status === TaskStatuses.Completed)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={s.container}>\r\n\r\n                <h3 className={s.span}>\r\n                    <div>\r\n                        <EditableSpan title={title} onChangeCallBack={changeTodolistTitle}/>\r\n                    </div>\r\n                    <div className={s.deleteTodolistIcon}>\r\n                        <Button size={\"small\"} onClick={removeTodolist} disabled={entityStatus === 'loading'}>\r\n                            <DeleteOutlined/>\r\n                        </Button>\r\n                    </div>\r\n                </h3>\r\n                <AddItemForm addItemCallBack={addTask} disabled={entityStatus === 'loading'}/>\r\n                <div>\r\n                    {tasksForTodolist.map(t =>\r\n                        <Task task={t} todolistId={todolistId} key={t.id}/>\r\n                    )}\r\n                </div>\r\n                <div className={s.status}>\r\n                    <Button size={\"small\"} variant={filter === \"all\" ? \"contained\" : \"text\"}\r\n                            onClick={onAllFilter}>All</Button>\r\n                    <Button size={\"small\"} color={\"primary\"} variant={filter === \"active\" ? \"contained\" : \"text\"}\r\n                            onClick={onActiveFilter}>Active\r\n                    </Button>\r\n                    <Button size={\"small\"} color={\"warning\"} variant={filter === \"completed\" ? \"contained\" : \"text\"}\r\n                            onClick={onCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n)\r\n\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nexport default function LinearBuffer() {\r\n    const [progress, setProgress] = React.useState(0);\r\n    const [buffer, setBuffer] = React.useState(10);\r\n\r\n    const progressRef = React.useRef(() => {});\r\n    React.useEffect(() => {\r\n        progressRef.current = () => {\r\n            if (progress > 100) {\r\n                setProgress(0);\r\n                setBuffer(10);\r\n            } else {\r\n                const diff = Math.random() * 10;\r\n                const diff2 = Math.random() * 10;\r\n                setProgress(progress + diff);\r\n                setBuffer(progress + diff + diff2);\r\n            }\r\n        };\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            progressRef.current();\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <LinearProgress variant=\"buffer\"  value={progress} valueBuffer={buffer} />\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/redux/store\";\r\nimport {setAppError} from \"../../state/app-Reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorBar() {\r\n    let dispatch = useDispatch()\r\n    let error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import Container from '@mui/material/Container/Container';\r\nimport Grid from '@mui/material/Grid/Grid';\r\nimport Paper from '@mui/material/Paper/Paper';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport './App.css';\r\nimport {AddItemForm,} from \"./components/AddItemForm/AddItemForm\";\r\nimport {Header} from './components/AppBar/AppBar';\r\nimport {AppRootStateType} from \"./state/redux/store\";\r\nimport {CreateTodolistThunk, GetTodolistsThunk, TodolistDomainType} from \"./state/todolists-Reducer\";\r\nimport {Todolist} from \"./components/Todolist/Todolist\";\r\nimport LinearBuffer from \"./components/temp/Preloader\";\r\nimport {RequestStatusType} from \"./state/app-Reducer\";\r\nimport ErrorBar from \"./components/ErrorBar/ErrorBar\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state)=> state.app.status)\r\n\r\n    console.log('APP RENDERED')\r\n    let dispatch = useDispatch()\r\n    const addNewTodolist = useCallback((title: string) => dispatch(CreateTodolistThunk(title)),[dispatch])\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    useEffect(()=>{\r\n        dispatch(GetTodolistsThunk())\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header />\r\n            <ErrorBar />\r\n            {status === 'loading' && <LinearBuffer /> }\r\n                <Container>\r\n\r\n                <Grid container style={{ padding: \"20px\" }}>\r\n                    <AddItemForm addItemCallBack={addNewTodolist} disabled={status === 'loading'} />\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n\r\n                    {\r\n                        todolists.map((tl) => {\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{ padding: \"20px\" }}>\r\n                                    <Todolist key={tl.id} todolistId={tl.id} title={tl.title} filter={tl.filter} entityStatus={tl.entityStatus}\r\n\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../tasks-Reducer\";\r\nimport {todolistsReducer} from \"../todolists-Reducer\";\r\nimport thunk from \"redux-thunk\"\r\nimport {appReducer} from \"../app-Reducer\";\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(RootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof RootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todolist_container__2-MrN\",\"span\":\"Todolist_span__i5ptW\",\"deleteTodolistIcon\":\"Todolist_deleteTodolistIcon__20CNq\",\"tasks\":\"Todolist_tasks__lJ4gM\",\"isDone\":\"Todolist_isDone__yiSji\",\"status\":\"Todolist_status__1cgdq\"};"],"sourceRoot":""}